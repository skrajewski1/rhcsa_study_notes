Title: RHCSA Exam Notes
Date: 2-7-2025
Author: Sean Krajewski

##### Note to Reader #####

I created this text file so that I would have a place to keep my notes for future studying as I got tired of writing notes by hand.
This is meant for the RHCSA (Exam EX200) offered by RedHat.  It is considered an entry level exam and tests your skills on Red Hat systems.
A passing grade is 70% or 210 of 300 points.
Given the trends toward microservices and cloud infrastructure it would be best to know containerization tools really well to supplement linux skills.
This resource is free to use by others if you need something quick to review.
Scroll through the text file or use Ctrl-F to search for terms and commands.
Not meant to be 100% thorough.
See resources used below.

Topics Covered
1. Tuned
2. Network Time Protocol
3. Systemctl
4. Users and Groups
5. File Management
6. Configuring Repos
7. Processes
8. Partitioning & Swap Space Management
9. SSH Configuration (root login)
10. LVM creation
11. Stratis
12. SElinux 
13. Virtual Data Optimizer (VDO)
14. Network configuration
15. Podman
16. Yum
17. Bash Scripting
18. Autofs & NFS
19.Default System Level
20. Journald
21. Grep and Find
22. System Bootloader


Study Resources:

RHCSA Exam Objectives: https://www.redhat.com/en/services/training/ex200-red-hat-certified-system-administrator-rhcsa-exam?section=objectives
RHCSA Practice Questions by chlebik  https://github.com/chlebik/rhcsa-practice-questions/blob/master/README.md
Het Tanis https://www.youtube.com/@het_tanis8213/streams
Dex Tutor (old) https://www.youtube.com/watch?v=TmrS7FhaaRA&list=PLlr7wO747mNrUoTuXhZ0REJw3hL4oWvLm
Dex Tutor (new) https://www.youtube.com/watch?v=UQuCZWJW7bY&list=PLlr7wO747mNr3DQnprOi51GtsB39pCV7k
Learn Linux TV (for bash)  https://www.youtube.com/playlist?list=PLT98CRl2KxKGj-VKtApD8-zCqSaN2mD4w
RHCSA 8th Edition Michael Jan and Alessandro Orsaria


#############################################################################################

Topic 1: Tuned

Define: a configuration tool used to optimize the system with pre-built profiles. It ajusts CPU, disk, and network settings depending on workload.
By default tuned will not dynamically adjust system settings
You can manually modify it witht he tuned-adm command

Commands:

dnf install tuned -y 
systemctl start --now tuned
tuned-adm list
tuned-adm active
tuned-adm recommend
tuned-adm profile <profile_name>
tuned-adm off
tuned-adm active

#############################################################################################

Topic 2: Network Time Protocol

Define: links your device to a clock so that time is accurate.
Very important for financial industry.  
Possibly security and compliance issues if not set up correctly

Commands:

dnf install chrony
systemctl start --now chronyd
vim /etc/chrony.conf   (server <ip> iburst)
systemctl restart chronyd
chronyc sources -c
chronyc sources -v
timedatectl set-ntp true
timedatectl set-ntp false

chronyc makestep  # (Optional for immediate sync)

#############################################################################################

Topic 3: Systemctl

Define: utility helps you start, restart, stop, disable services that you download or that on the system already.
stands for system control
each service uses a daemon i.e. a background process that starts at boot.  They end with a "d" typically.
you have to be the root user or sudo permissions to use this command.

Commands:
systemctl status <service>
systemctl start 
systemctl stop
systemctl enable 
systemctl disable
systemctl start --now <service>    (this starts and enables at same time)

systemctl is-active sshd
systemctl is-enabled sshd

systemctl list-units   (lists all active systemd units i.e. services, sockets, mounts)

#############################################################################################

Topic 4: Users and Groups Management

Define: it's what it sounds like

Commands:

useradd -g cloud sean
useradd -aG linux sean
useradd -s /bin/nologin bob   (bob can't login)
userdel cathy
passwd sean
chage -E YYYY-MM-DD username   (passwd expiration date)
chage -E $(date -d +30days +%Y-$m-%d) sean    (this will expire my password in 30 days.  Look in man page for this, don't need to memorize)
useradd -u 1050 -g developers -G docker,jenkins -e 2025-12-31 devops1
echo "RedHat123" | passwd --stdin devops1
chage -d 0 devops1
echo "DenyUsers devops1" >> /etc/ssh/sshd_config
systemctl restart sshd
echo "deploy ALL=(ALL) !ALL" > /etc/sudoers.d/deploy    (replace deploy with the user)
chmod 440 /etc/sudoers.d/deploy
sudo -l -U <username>     (checks if user can run sudo)
chage -M 60 -I 7 <username>    (set pw exp to 60 days and lockout after 7 days)

# Allow <analyst> to restart nginx via sudo (create a sudoers file)
echo "analyst ALL=(ALL) NOPASSWD: /bin/systemctl restart nginx" > /etc/sudoers.d/analyst

# Set correct permissions for sudoers file
chmod 440 /etc/sudoers.d/analyst

# Allow engineer1 to restart docker without a password
echo "engineer1 ALL=(ALL) NOPASSWD: /bin/systemctl restart docker" > /etc/sudoers.d/engineer1
chmod 440 /etc/sudoers.d/engineer1

# Allow engineer2 to view system logs with journalctl
echo "engineer2 ALL=(ALL) NOPASSWD: /bin/journalctl -r" > /etc/sudoers.d/engineer2
chmod 440 /etc/sudoers.d/engineer2

# Ensure contractor has no sudo access
deluser contractor sudo 2>/dev/null

chage -l <username>

useradd -m devops
sudo -u devops ssh-keygen -t rsa -b 4096 -N "" -f /home/devops/.ssh/id_rsa
mkdir -p /home/devops/.ssh
cat /home/devops/.ssh/id_rsa.pub | sudo tee /home/devops/.ssh/authorized_keys

#adds user to sudoers list so they can use sudo command
usermod -aG wheel <username>

setfacl -R -m d:u:davis:rwx /home/john   (allows only davis to have full access to john's home folder and files/directories new and future)


#############################################################################################

Topic 5: File Management

Define: basically all of linux is just files even the directories are files just a special type.  

Commands:

chmod g+s <file/directory>  (allows all future files and directories to have the same owner)
chmod +t <file/dir>     (prevents others from deleting files not owned by them)
mkdir -p main/{d1,d2,d3}

gzip -k <files> 
tar -cvjf <backup name> <file>    (just remember -f has to be last!  use this for bzip2)
tar -cvzf <backupname>  <file>      (use for tgz)

echo "umask 027" >> /etc/profile   (sets default permission to 640 for new files)


#############################################################################################

Topic 6: Configuring Repositories

Define: In order to download packages (groups of files/directories, etc) you have to set up a Repositories.  
You need to create an account on developer RedHat
For the exam you just need to configure a file though.

Commands:

subscription-manager register --username <name> --password <password>

cd /etc/yum.repos.d/local.repo     (you can name it whatever but it has to be .repo at the end)
Inside the file you need to write...

[BaseOS]
name=baseOS
baseurl=<ip given to you on test>
gpgcheck=0
enabled=1

dnf repolist -v   (shows you the enabled software repos and shows detailed inforamtion about them)


yum repolist | grep my_repo.repo     (check to make sure it's being picked up)

#############################################################################################

Topic 7: Processes

Description: A program is a set of instructions. A program in execution is a process.
You start processes by executing a program (double click, issue command via CLI, etc)
A process will have a unique PID i.e. process ID 
process states: start, sleep, stop, zombie

Commands:
ps 
ps aux | head
ps lax | head   (gives UID, parent ID, priority)
sleep 10 &      (will run sleep in background)
jobs
bg % <job#>
fg % <job#>
kill <pid>
killall <command>
top               (used to monitor processes)

#############################################################################################

Topic 8: Disk Partitioning & Swap Space Management

Description: Disk partition are sections of storage you can put a file system on for storing files.
Swap is like temporary storage it's not permanent

Commands:

lsblk
ls /dev 

fdisk <disc>
partprobe /dev/<disc>
mkdir /newdisk
mkfs.xfs /dev/sdb1
vim /etc/fstab
/dev/wgroup/wshare   /mnt/wshare   ext4   defaults   0 0

For swaps do this
free -m
lsblk
fdisk /dev/<partiion>
   make sure to create  partition with type 82 for swap, p to check, w to write to create it
mkswap /dev/<partion>
vim /etc/fstab
   add the line /dev/<partiion> swap swap defualts 0 0
swapon -a 
free -m (to check)

to remove swap
swapoff /dev/<partion>
vim /etc/fstab    (remove the swap line)
systemctl daemon-reload
fdisk /dev/sdb1   use d then w



#############################################################################################

Topic 9: SSH Configure

Description: By default RHEL9 doesn't have ssh enabled for root user so you have to configure a setting.

Commands:

To get the ssh access for either Node during RHCSA exam:-
The default for the sshd_config(5) PermitRootLogin option has changed from "yes" to "prohibit-password".
vi /etc/ssh/sshd_config 
PermitRootLogin prohibit-password (please change it to like below)
PermitRootLogin yes 
systemctl restart sshd

#############################################################################################


Topic 10: LVM creation

Decription: LVM let's you use multiple partions across different disks.  If one disk has 1TB and you can create a logical volume to use that disk and others.
In short this unifies all your storage so you can have a large storage pool from which to draw from.

Commands:

fdisk /dev/sdb1
create a partition with 8e type
partprobe (if it doesn't show up right away and reboot if it throws an error)

pvcreate /dev/sdb2
vgcreate wgroup -s 8M /dev/sdb2
vgs(check)
lvcreate -l 50 -n wshare wgroup
lvs
mkfs.ext4 /dev/wgroup/wshare
mkdir -p /mnt/wshare
blkid  (you can use the UUID or the device path)
vim /etc/fstab
/dev/wgroup/wshare    /mnt/wshare    ext4  defaults   0 0
mount -a 
df -h  (to check)


lvresize -L 300M -r /dev/myvgo/vo   (resize lv and filesystem, for xfs you can only increase!!!)

umount /dev/myvgo/v0  (unmount before labeling)
xfs_admin -L "myFS" /dev/myvgo/v0
mount /dev/myvgo/v0


To remove
umount /mnt/v0
rm -rf /mnt/v0
lvdisplay /dev/myvgo/v0
lvremove /dev/myvgo/v0
vgremove myvgo
pvremove /dev/sdb1

#############################################################################################

Topic 11: Stratis

Decrpition: 
Features: Thin provisioning, monitoring, file system snapshots, tiering, pool-based management, monitoring
components: blockdev, pool, filesystem

Commands:

dnf install stratisd stratis-cli -y 
systemctl start --now stratisd
stratis pool create pool1 /dev/sdc 
stratis pool list
stratis filesystem create pool1 fs1
stratis filesystem list 
mkdir -p /mnt/fs1
vim /etc/fstab
 in the file put the UUID /fs1 xfs  defaults,x-systemd.requires=stratisd.service 0 0
mount -a

********************************************************************
******  List the stratis filesystem and unmount them ***************
********************************************************************

stratis filesystem list pool1
umount /mnt/fs1

********************************************************************
********************* Destroy the filesystem ***********************
********************************************************************

stratis filesystem destroy pool1 fs1
stratis filesystem destroy pool1 fs1-snap1

# To confirm the removal run:
stratis filesystem list pool1

********************************************************************
******************* Destroy the stratis pool  **********************
********************************************************************

stratis pool destroy pool1
stratis pool list

********************************************************************
******* Remove the entries in the /etc/fstab for filesystems *******
********************************************************************
vi /etc/fstab
delete the line 
/stratis/pool1/fs1  /mnt/fs1  xfs  defaults   0 0

********************************************************************
***************** Delete the directory /mnt/fs1 ********************
********************************************************************
cd /mnt
rm -r fs1
cd ~
# to check
lsblk

#############################################################################################

Topic 12: SElinux

Description: a mandaory access control system for linux.
Relies on labels and contexts which are like policies i.e. rules for access

Commands:

SElinux Modes
getenforce
setenforce 0   (set's selinux to permissive)
vim /etc/sysconfig/selinux   (write in there selinux disabled)
reboot to make changes permanent

SElinux Booleans
getsebool -a | grep "httpd"
setsebool -P httpd_enable_homedirs on

SElinux Port 
semanage port -a -t http_port_t -p tcp 82


SElinux contexts
cat /var/www/html/index.html
curl localhost/index.html
semanage fcontext -a -t httpd_sys_context_t "/text(.*)?"
restorecon -Rv /test
ls -lZ /test     (should show the context we're adjusted)
vim /etc/httpd/conf/httpd.conf
     (edit the document root to /test)
systemctl restart httpd 
curl localhost/index.html


dnf install setroubleshoot -y
sealert -a /var/log/audit/audit.log

#############################################################################################

Topic 13: Virtual Data Optimizer (VDO)

Descrpition: a storage tool that does not duplicate data and it compresses data.  
Also VDO uses thin provisioning i.e. it only provisions what's needed
VDO is good for large scale env like databases, VM, and backups
A lot of the answers for this question is located in the man page i.e. man vdo


Commands:

dnf install vdo kmod-kvdo -y

vdo create --name vdo1 --device /dev/sdb --vdoLogicalSize=50G
vdo list
mkfs.xfs -K /dev/mapper/vdo1
mkdir -p /mnt/vdo1
vim /etc/fstab
     /dev/mapper/vdo1 /vdo1 auto defaults,x-systemd.requires=vdo.service 0 0
mount -a


to remove:
umount /mnt/vdo1
rm -rf /mnt/vdo1
vdo stop --name=vdo1
vdo remove --name=vdo1
wipefs -a /dev/sdc
(remove the line from fstab)


Toubleshooting
Sometimes you may need to dnf update kernel because the kernel is matching with the package.
make sure the partition is clean i.e. wipefs -a /dev/<partition>

#############################################################################################

Topic 14: Network configuration

Description: Basically you have to set up a hostname, ip address, netmask, gateway, and dns.  
use nmcli or nmtui for this.  nmtui is much easier as you don't have to memorize nmcli Commands

Commands:

hostnamectl set-hostname <name>
hostname    (check if it's right)
nmtui

nmcli general hostname SOME_NAME  (another way to set the hostname)



#############################################################################################

Topic 15: Podman

Description: Basically this a copy of docker with the biggest difference being Podman is daemonless.
Daemonless meaning it doesn't have a central running daemon that if compromised would jeopardize 
all the other containers.
Podman/Docker are containerization tools that use images to build containers which are good for running apps
Kubernetes is like podman and docker only that it's suited for enterprise level stuff i.e. thousands to millions of containers/pods


Command:

dnf install podman @container-tools
podman login registry.redhat.io    (put in username and password)
podman serach httpd
podman pull docker.io/library/httpd     (you can download any image)
podman images
podman rmi  (remove image)
podman run -d --name web1 <image id>
podman run -d --name web1 -p 8080:80 <image id>
podman ps
podman stop <container name>
podman rm <container name>
podman rmi <image name>
podman run run -it <image> /bin/bash             (takes you inside the container you just created)
podman run -d --name web4 -p 8081:80 -v /web:/usr/local/apache2/htdocs:Z <image>

(this is for running a service in a container)
podman generate systemd web5 > /etc/systemd/system/web5-container.service    (This is for a root user)
systemctl daemon-reload 
systemctl start --now web5-container
systemctl status web5-container

(running a service in a container on a user i.e. not the root. login to a user)
ssh user@localhost 
podman ps
podman run -d --name new -p 8083:80 <image> 
mkdir -p ~/.config/systemd/user
podman generate systemd new > ~/.config/systemd/user/new-container.service
vim ~/.config/systemd/user/new-container.service
(at the bottom should say WantedBy=default.service)
systemctl --user daemon-reload
systemctl --user start --now new-container

loginctl enable-linger   (this will start the service regardless if the user is logged in. i.e. it starts the service when the system boots)
if you want it off then use loginctl disable-linger <username>

DON'T FORGET
if you are adding a web service you need to adjust the fiewall settings
firewall-cmd --permanent --add-port=8083/tcp 
firewall-cmd --reload

#############################################################################################


Topic 16: Yum

Description: Yum is a tool to install packages.  You can also use dnf which is a more powerful version.

Commands:

yum list <name>
yum search <name>
yum info <name>
yum install <name>
yum update <name>
yum remove <name>


#############################################################################################

Topic 17: Bash Scripting

Description: Bash is a programming language and we use this tool to make scripts to help automate.
There is a ton to learning how to program and you only get good at it after lots of practice.
Below is just a few things that will help fill in some of the syntax.  
Learn the syntax and then combine that with linux commands is the general idea.

Every script starts with:
#!  (this is called a shebang)
Next you put in the interpreter i.e. the shell.
#!/bin/bash   (this let's you use bash shell)

Variables are like boxes that hold data.  Here's how you write them in bash.
name="Bash"
To call the variable you can do something like this:
echo "Hey there, $name"   (this will print out as "Hey there, Bash")

You can get inputs from the user for variables doing either Interactive or Command-Line input.
Command-line might look like this:
read -p "enter a file name: " file
When you run the script it will print this out and when you type in the file name it stores it in the variable file
Interactive would look like this:
if [ "$#" -ne 2 ]; then
   echo "Usage: $0 /path/to/source /path/to/backups
   exit 1
fi

Conditional statements are basically true/false statements. You use if, elif, and else.  You always close with fi

Loops are for when you want to automate repetitive tasks.  Here you use for, while, until.  Here you close with done.
for i in {1..5}; do
   echo "Number: $i"
done 

Functions are just code bundled together that you can call up.  Usually it's a command to do something. These are like variables but just more complex.
greet() {
   echo "Hello, $1!"
}
greet "World"

Debugging scripts is simple.  Use set -x to go line by line until something fails.



#############################################################################################


Topic 18: AutoFS (Network File System)

Decription: Allows a client computer to connect to a server and get files.
Also if a shared folder is set up on the server files in there will show up on the client computers automatically as soon as they connect.
NFS isn't permaneently connected which saves on bandwidth
Automounter is configured on the clients machine
NFS shares are available to all users (with permission)

Commands:

(server)
dnf install nfs* -yes
mkdir /share
touch /share/f1 /share/f2
vim /share/f1
chmod 777 /share
vim /etc/exports  (/share <client ip>I(ro,synch))
exportfs -avr
firewall-cmd --add-service={nfs,mountd,rpc-bind} --permanent
firewall-cmd --reload
systemctl enable --now nfs-server
systemctl enable --now autofs 

(client computer)
dnf install nfs-utils autofs -y
showmount -e <server ip>
vim /etc/auto.master
   /auto_mount  /etc/auto.misc
vim /etc/auto.misc
   access   -rw,soft,intr  <ip of server>:/share

systemctl enable --now autofs

(if you run into erros on the client computer try the following)
journalctl -xe | grep autofs


#############################################################################################

Topic 19: Default System Level

Description: These are runlevels.  They let you change how you interact with the system.  poweroff.target for example would shut down the system.
multi-user.target is typically the default.  after you change the setting you must reboot for the changes to take affect.

systemctl get-default
sudo systemctl set-default graphical.target
systemctl get-default
reboot

systemctl list-units --type=target


If you have to set the default kernel you can do that by the following

dnf install efibootmgr -y    (tool you may have to install)
grubby --info=ALL | grep kernel
grubby --set-default /boot<rest of kernel info>
grubby --get-default


#############################################################################################

Topic 20: Journald

Description: It's the logging serviced used by systemd.  Important tool for troubleshooting issues.

Commands:

(edit file /etc/systemd/journald.conf  and change Storage=auto to Storage=persistent)
systemctl restart systemd-journald.service


#############################################################################################

Topic 21: Grep and Find

Description: Grep is used to search inside a file.  Find is used to find files or directories.  
You can combine both to use as a search bar of sorts to find things on the system.
It always helps if you know what you are searching for!
Note you can make symlinks for commonly accessesed files and use that as a short cut.  i.e. find your conf and log file and symlink it to your home dir for easy access.

Command:


find /etc -type f -maxdepth 1 -mtime +180 -exec cp {} /var/tmp/pvt \;  (finds files that are over 180days old and copies them to /var/tmp/pvt)
grep -lis chrony /etc/*   (searches files in /etc/ for the word chrony, you can put it in quotes also.)


#############################################################################################

Topic 22: System Bootloader

Description: This is managed by the GRUB 2 bootloader on RHEL9.



#############################################################################################






#############################################################################################